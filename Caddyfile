{$DOMAIN}

# Fetch the request-id or get a new one
request_id x-request-id
header / x-request-id {request_id}

# Make the logs docker friendly and inject the request-id
log / stdout "{request_id} - {common}"
errors stderr

# Configure letsencrypt
tls {$EMAIL}

# Push-tester proxy
proxy /sse-proxy {$SSE_PROXY} {
  without /sse-proxy
  transparent
  header_upstream x-request-id {request_id}
  header_upstream connection ""
}

# Consent Management Backend
rewrite {
  if_op or
  if {path} starts_with /users
  if {path} starts_with /applications
  if {path} starts_with /policies
  to /consent-manager{uri}
}

proxy /consent-manager {$CONSENT_MANAGEMENT_BACKEND} {
  without /consent-manager
  transparent
  header_upstream x-request-id {request_id}
}

# Transparency UI
proxy /transparency {$TRANSPARENCY_UI} {
  without /transparency
  transparent
  header_upstream x-request-id {request_id}
}

# Consent UI
proxy /consent {$CONSENT_UI} {
  without /consent
  transparent
  header_upstream x-request-id {request_id}
}

# Policy CRUD UI
proxy /policy-crud {$POLICY_CRUD_UI} {
  without /policy-crud
  transparent
  header_upstream x-request-id {request_id}
}

# Keycloak
proxy /auth {$KEYCLOAK} {
  transparent
  header_upstream x-request-id {request_id}
}


# Serve leftovers from frontend webserver
# TODO: serve a landingpage from here
proxy / {$FRONTEND} {
  transparent
  header_upstream x-request-id {request_id}
}

